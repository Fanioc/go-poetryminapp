// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: miniapp.proto

package miniapp

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrCode struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ErrCode) Reset()         { *m = ErrCode{} }
func (m *ErrCode) String() string { return proto.CompactTextString(m) }
func (*ErrCode) ProtoMessage()    {}
func (*ErrCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{0}
}
func (m *ErrCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrCode.Merge(m, src)
}
func (m *ErrCode) XXX_Size() int {
	return m.Size()
}
func (m *ErrCode) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrCode.DiscardUnknown(m)
}

var xxx_messageInfo_ErrCode proto.InternalMessageInfo

func (m *ErrCode) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrCode) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type LoginParams struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *LoginParams) Reset()         { *m = LoginParams{} }
func (m *LoginParams) String() string { return proto.CompactTextString(m) }
func (*LoginParams) ProtoMessage()    {}
func (*LoginParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{1}
}
func (m *LoginParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginParams.Merge(m, src)
}
func (m *LoginParams) XXX_Size() int {
	return m.Size()
}
func (m *LoginParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginParams.DiscardUnknown(m)
}

var xxx_messageInfo_LoginParams proto.InternalMessageInfo

func (m *LoginParams) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Session struct {
	Session string   `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	UserId  int32    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Errcode *ErrCode `protobuf:"bytes,3,opt,name=errcode,proto3" json:"errcode,omitempty"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{2}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *Session) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Session) GetErrcode() *ErrCode {
	if m != nil {
		return m.Errcode
	}
	return nil
}

type CheckSession struct {
	UserId  int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Errcode *ErrCode `protobuf:"bytes,2,opt,name=errcode,proto3" json:"errcode,omitempty"`
}

func (m *CheckSession) Reset()         { *m = CheckSession{} }
func (m *CheckSession) String() string { return proto.CompactTextString(m) }
func (*CheckSession) ProtoMessage()    {}
func (*CheckSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{3}
}
func (m *CheckSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckSession.Merge(m, src)
}
func (m *CheckSession) XXX_Size() int {
	return m.Size()
}
func (m *CheckSession) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckSession.DiscardUnknown(m)
}

var xxx_messageInfo_CheckSession proto.InternalMessageInfo

func (m *CheckSession) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CheckSession) GetErrcode() *ErrCode {
	if m != nil {
		return m.Errcode
	}
	return nil
}

type CheckSessionParams struct {
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (m *CheckSessionParams) Reset()         { *m = CheckSessionParams{} }
func (m *CheckSessionParams) String() string { return proto.CompactTextString(m) }
func (*CheckSessionParams) ProtoMessage()    {}
func (*CheckSessionParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{4}
}
func (m *CheckSessionParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckSessionParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckSessionParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckSessionParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckSessionParams.Merge(m, src)
}
func (m *CheckSessionParams) XXX_Size() int {
	return m.Size()
}
func (m *CheckSessionParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckSessionParams.DiscardUnknown(m)
}

var xxx_messageInfo_CheckSessionParams proto.InternalMessageInfo

func (m *CheckSessionParams) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type UserInfo struct {
	NickName string   `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Errcode  *ErrCode `protobuf:"bytes,2,opt,name=errcode,proto3" json:"errcode,omitempty"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{5}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UserInfo) GetErrcode() *ErrCode {
	if m != nil {
		return m.Errcode
	}
	return nil
}

type UserCofing struct {
	NickName string   `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Errcode  *ErrCode `protobuf:"bytes,2,opt,name=errcode,proto3" json:"errcode,omitempty"`
}

func (m *UserCofing) Reset()         { *m = UserCofing{} }
func (m *UserCofing) String() string { return proto.CompactTextString(m) }
func (*UserCofing) ProtoMessage()    {}
func (*UserCofing) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{6}
}
func (m *UserCofing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCofing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCofing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCofing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCofing.Merge(m, src)
}
func (m *UserCofing) XXX_Size() int {
	return m.Size()
}
func (m *UserCofing) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCofing.DiscardUnknown(m)
}

var xxx_messageInfo_UserCofing proto.InternalMessageInfo

func (m *UserCofing) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *UserCofing) GetErrcode() *ErrCode {
	if m != nil {
		return m.Errcode
	}
	return nil
}

type GetUserInfoParams struct {
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	UserId  int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetUserInfoParams) Reset()         { *m = GetUserInfoParams{} }
func (m *GetUserInfoParams) String() string { return proto.CompactTextString(m) }
func (*GetUserInfoParams) ProtoMessage()    {}
func (*GetUserInfoParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{7}
}
func (m *GetUserInfoParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserInfoParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserInfoParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserInfoParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserInfoParams.Merge(m, src)
}
func (m *GetUserInfoParams) XXX_Size() int {
	return m.Size()
}
func (m *GetUserInfoParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserInfoParams.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserInfoParams proto.InternalMessageInfo

func (m *GetUserInfoParams) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *GetUserInfoParams) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserConfigParams struct {
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	UserId  int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetUserConfigParams) Reset()         { *m = GetUserConfigParams{} }
func (m *GetUserConfigParams) String() string { return proto.CompactTextString(m) }
func (*GetUserConfigParams) ProtoMessage()    {}
func (*GetUserConfigParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{8}
}
func (m *GetUserConfigParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserConfigParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserConfigParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserConfigParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserConfigParams.Merge(m, src)
}
func (m *GetUserConfigParams) XXX_Size() int {
	return m.Size()
}
func (m *GetUserConfigParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserConfigParams.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserConfigParams proto.InternalMessageInfo

func (m *GetUserConfigParams) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *GetUserConfigParams) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type UpdateUserInfoParams struct {
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (m *UpdateUserInfoParams) Reset()         { *m = UpdateUserInfoParams{} }
func (m *UpdateUserInfoParams) String() string { return proto.CompactTextString(m) }
func (*UpdateUserInfoParams) ProtoMessage()    {}
func (*UpdateUserInfoParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{9}
}
func (m *UpdateUserInfoParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserInfoParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserInfoParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserInfoParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserInfoParams.Merge(m, src)
}
func (m *UpdateUserInfoParams) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserInfoParams) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserInfoParams.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserInfoParams proto.InternalMessageInfo

func (m *UpdateUserInfoParams) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type SetUserConfigParams struct {
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (m *SetUserConfigParams) Reset()         { *m = SetUserConfigParams{} }
func (m *SetUserConfigParams) String() string { return proto.CompactTextString(m) }
func (*SetUserConfigParams) ProtoMessage()    {}
func (*SetUserConfigParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d6f8b141aa2c57, []int{10}
}
func (m *SetUserConfigParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUserConfigParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUserConfigParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUserConfigParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserConfigParams.Merge(m, src)
}
func (m *SetUserConfigParams) XXX_Size() int {
	return m.Size()
}
func (m *SetUserConfigParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserConfigParams.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserConfigParams proto.InternalMessageInfo

func (m *SetUserConfigParams) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func init() {
	proto.RegisterType((*ErrCode)(nil), "miniapp.ErrCode")
	proto.RegisterType((*LoginParams)(nil), "miniapp.LoginParams")
	proto.RegisterType((*Session)(nil), "miniapp.Session")
	proto.RegisterType((*CheckSession)(nil), "miniapp.CheckSession")
	proto.RegisterType((*CheckSessionParams)(nil), "miniapp.CheckSessionParams")
	proto.RegisterType((*UserInfo)(nil), "miniapp.UserInfo")
	proto.RegisterType((*UserCofing)(nil), "miniapp.UserCofing")
	proto.RegisterType((*GetUserInfoParams)(nil), "miniapp.GetUserInfoParams")
	proto.RegisterType((*GetUserConfigParams)(nil), "miniapp.GetUserConfigParams")
	proto.RegisterType((*UpdateUserInfoParams)(nil), "miniapp.UpdateUserInfoParams")
	proto.RegisterType((*SetUserConfigParams)(nil), "miniapp.SetUserConfigParams")
}

func init() { proto.RegisterFile("miniapp.proto", fileDescriptor_d3d6f8b141aa2c57) }

var fileDescriptor_d3d6f8b141aa2c57 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xdd, 0x6d, 0x48, 0xdc, 0x4c, 0x08, 0x4a, 0x27, 0x45, 0x58, 0x2e, 0x58, 0x61, 0x4f, 0x11,
	0x87, 0x14, 0xca, 0x1d, 0xa9, 0x98, 0x8f, 0x22, 0x01, 0x42, 0xb6, 0x72, 0xae, 0x4c, 0xbc, 0x71,
	0x57, 0x95, 0x77, 0x2d, 0x3b, 0xfc, 0x0f, 0x24, 0xfe, 0x14, 0xc7, 0x1e, 0x39, 0xa2, 0xe4, 0x8f,
	0x20, 0x3b, 0xb6, 0x6b, 0x63, 0x5b, 0x21, 0xa8, 0xb7, 0x19, 0xcf, 0xec, 0x9b, 0x37, 0x6f, 0x9e,
	0x0c, 0xc3, 0x40, 0x48, 0xe1, 0x86, 0xe1, 0x2c, 0x8c, 0xd4, 0x4a, 0xa1, 0x96, 0xa5, 0xec, 0x14,
	0xb4, 0xb7, 0x51, 0x64, 0x29, 0x8f, 0x23, 0xc2, 0xbd, 0x85, 0xf2, 0xb8, 0x4e, 0x27, 0x74, 0xda,
	0xb5, 0xd3, 0x18, 0x47, 0xd0, 0x09, 0x62, 0x5f, 0x3f, 0x98, 0xd0, 0x69, 0xdf, 0x4e, 0x42, 0xf6,
	0x14, 0x06, 0x1f, 0x95, 0x2f, 0xe4, 0x17, 0x37, 0x72, 0x83, 0xb8, 0xf2, 0xa8, 0xbf, 0x7d, 0xc4,
	0xae, 0x40, 0x73, 0x78, 0x1c, 0x0b, 0x25, 0x51, 0x07, 0x2d, 0xde, 0x86, 0x59, 0x47, 0x9e, 0xe2,
	0x23, 0xd0, 0xbe, 0xc5, 0x3c, 0xba, 0x14, 0x5e, 0x8a, 0xde, 0xb5, 0x7b, 0x49, 0xfa, 0xc1, 0xc3,
	0x67, 0xa0, 0xf1, 0x28, 0x4a, 0x41, 0x3b, 0x13, 0x3a, 0x1d, 0x9c, 0x8d, 0x66, 0x39, 0xf7, 0x8c,
	0xa9, 0x9d, 0x37, 0x30, 0x07, 0xee, 0x5b, 0x57, 0x7c, 0x71, 0xed, 0xd4, 0x41, 0x69, 0x1b, 0xe8,
	0xc1, 0x2e, 0xd0, 0x19, 0x60, 0x19, 0x34, 0x5b, 0xb4, 0x75, 0x13, 0xe6, 0xc0, 0xe1, 0x3c, 0x99,
	0x22, 0x97, 0x0a, 0x4f, 0xa0, 0x2f, 0xc5, 0xe2, 0xfa, 0x52, 0xba, 0x41, 0xae, 0xc9, 0x61, 0xf2,
	0xe1, 0xb3, 0x1b, 0xf0, 0xbd, 0x48, 0xcc, 0x01, 0x12, 0x50, 0x4b, 0x2d, 0x85, 0xf4, 0xef, 0x0e,
	0xf6, 0x1d, 0x1c, 0xbd, 0xe7, 0xab, 0x9c, 0xee, 0xae, 0xd5, 0x5a, 0x8f, 0xc4, 0x2e, 0x60, 0x9c,
	0xe1, 0x58, 0x4a, 0x2e, 0x85, 0xff, 0xff, 0x48, 0xcf, 0xe1, 0x78, 0x1e, 0x7a, 0xee, 0x8a, 0xff,
	0x2b, 0x29, 0x76, 0x0a, 0x63, 0x67, 0x9f, 0xd9, 0x67, 0x3f, 0x3a, 0xd0, 0xfb, 0x24, 0xe4, 0x79,
	0x18, 0xe2, 0x0b, 0xe8, 0xa6, 0xee, 0xc5, 0xe3, 0x42, 0xa3, 0x92, 0x9b, 0x8d, 0x5b, 0xe5, 0xb2,
	0xe3, 0x33, 0x82, 0x17, 0x30, 0x4a, 0xed, 0x90, 0x0c, 0xcc, 0x7d, 0x76, 0x52, 0xf4, 0xd5, 0x9d,
	0x62, 0x3c, 0x6c, 0x2c, 0x32, 0x82, 0xaf, 0x60, 0x50, 0x12, 0x1f, 0x8d, 0xa2, 0xaf, 0x76, 0x12,
	0xe3, 0xa8, 0xa8, 0xe5, 0x05, 0x46, 0xd0, 0x82, 0x07, 0x55, 0xa9, 0xf0, 0xc9, 0x6d, 0x5b, 0x83,
	0x86, 0x46, 0xcd, 0x08, 0x8c, 0xe0, 0x1b, 0x18, 0x56, 0x2e, 0x87, 0x8f, 0xff, 0xa6, 0x51, 0x56,
	0xd5, 0x18, 0x57, 0x88, 0x6c, 0xed, 0xc8, 0x08, 0x9e, 0xc3, 0xd0, 0x69, 0x41, 0x69, 0xb8, 0x4d,
	0x13, 0x91, 0xd7, 0xfa, 0xcf, 0xb5, 0x49, 0x6f, 0xd6, 0x26, 0xfd, 0xbd, 0x36, 0xe9, 0xf7, 0x8d,
	0x49, 0x6e, 0x36, 0x26, 0xf9, 0xb5, 0x31, 0xc9, 0xd7, 0x5e, 0xfa, 0x8f, 0x7a, 0xf9, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xae, 0xb2, 0xa6, 0x42, 0xb4, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MinAppClient is the client API for MinApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MinAppClient interface {
	Login(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*Session, error)
	CheckUserSession(ctx context.Context, in *CheckSessionParams, opts ...grpc.CallOption) (*CheckSession, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoParams, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoParams, opts ...grpc.CallOption) (*ErrCode, error)
	GetUserConfig(ctx context.Context, in *GetUserConfigParams, opts ...grpc.CallOption) (*UserCofing, error)
	SetUserConfig(ctx context.Context, in *SetUserConfigParams, opts ...grpc.CallOption) (*ErrCode, error)
}

type minAppClient struct {
	cc *grpc.ClientConn
}

func NewMinAppClient(cc *grpc.ClientConn) MinAppClient {
	return &minAppClient{cc}
}

func (c *minAppClient) Login(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/miniapp.MinApp/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minAppClient) CheckUserSession(ctx context.Context, in *CheckSessionParams, opts ...grpc.CallOption) (*CheckSession, error) {
	out := new(CheckSession)
	err := c.cc.Invoke(ctx, "/miniapp.MinApp/CheckUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minAppClient) GetUserInfo(ctx context.Context, in *GetUserInfoParams, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/miniapp.MinApp/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minAppClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoParams, opts ...grpc.CallOption) (*ErrCode, error) {
	out := new(ErrCode)
	err := c.cc.Invoke(ctx, "/miniapp.MinApp/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minAppClient) GetUserConfig(ctx context.Context, in *GetUserConfigParams, opts ...grpc.CallOption) (*UserCofing, error) {
	out := new(UserCofing)
	err := c.cc.Invoke(ctx, "/miniapp.MinApp/GetUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minAppClient) SetUserConfig(ctx context.Context, in *SetUserConfigParams, opts ...grpc.CallOption) (*ErrCode, error) {
	out := new(ErrCode)
	err := c.cc.Invoke(ctx, "/miniapp.MinApp/SetUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinAppServer is the server API for MinApp service.
type MinAppServer interface {
	Login(context.Context, *LoginParams) (*Session, error)
	CheckUserSession(context.Context, *CheckSessionParams) (*CheckSession, error)
	GetUserInfo(context.Context, *GetUserInfoParams) (*UserInfo, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoParams) (*ErrCode, error)
	GetUserConfig(context.Context, *GetUserConfigParams) (*UserCofing, error)
	SetUserConfig(context.Context, *SetUserConfigParams) (*ErrCode, error)
}

func RegisterMinAppServer(s *grpc.Server, srv MinAppServer) {
	s.RegisterService(&_MinApp_serviceDesc, srv)
}

func _MinApp_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinAppServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniapp.MinApp/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinAppServer).Login(ctx, req.(*LoginParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinApp_CheckUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSessionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinAppServer).CheckUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniapp.MinApp/CheckUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinAppServer).CheckUserSession(ctx, req.(*CheckSessionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinApp_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinAppServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniapp.MinApp/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinAppServer).GetUserInfo(ctx, req.(*GetUserInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinApp_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinAppServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniapp.MinApp/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinAppServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinApp_GetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinAppServer).GetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniapp.MinApp/GetUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinAppServer).GetUserConfig(ctx, req.(*GetUserConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinApp_SetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinAppServer).SetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniapp.MinApp/SetUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinAppServer).SetUserConfig(ctx, req.(*SetUserConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _MinApp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "miniapp.MinApp",
	HandlerType: (*MinAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _MinApp_Login_Handler,
		},
		{
			MethodName: "CheckUserSession",
			Handler:    _MinApp_CheckUserSession_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _MinApp_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _MinApp_UpdateUserInfo_Handler,
		},
		{
			MethodName: "GetUserConfig",
			Handler:    _MinApp_GetUserConfig_Handler,
		},
		{
			MethodName: "SetUserConfig",
			Handler:    _MinApp_SetUserConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miniapp.proto",
}

func (m *ErrCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrCode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *LoginParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.UserId))
	}
	if m.Errcode != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.Errcode.Size()))
		n1, err1 := m.Errcode.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *CheckSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.UserId))
	}
	if m.Errcode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.Errcode.Size()))
		n2, err2 := m.Errcode.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *CheckSessionParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckSessionParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NickName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.Errcode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.Errcode.Size()))
		n3, err3 := m.Errcode.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *UserCofing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCofing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NickName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.Errcode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.Errcode.Size()))
		n4, err4 := m.Errcode.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}

func (m *GetUserInfoParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserInfoParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserConfigParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserConfigParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *UpdateUserInfoParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserInfoParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	return i, nil
}

func (m *SetUserConfigParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserConfigParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiniapp(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	return i, nil
}

func encodeVarintMiniapp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ErrCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMiniapp(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *LoginParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMiniapp(uint64(m.UserId))
	}
	if m.Errcode != nil {
		l = m.Errcode.Size()
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *CheckSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovMiniapp(uint64(m.UserId))
	}
	if m.Errcode != nil {
		l = m.Errcode.Size()
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *CheckSessionParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	if m.Errcode != nil {
		l = m.Errcode.Size()
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *UserCofing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	if m.Errcode != nil {
		l = m.Errcode.Size()
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *GetUserInfoParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMiniapp(uint64(m.UserId))
	}
	return n
}

func (m *GetUserConfigParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovMiniapp(uint64(m.UserId))
	}
	return n
}

func (m *UpdateUserInfoParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func (m *SetUserConfigParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovMiniapp(uint64(l))
	}
	return n
}

func sovMiniapp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMiniapp(x uint64) (n int) {
	return sovMiniapp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErrCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errcode == nil {
				m.Errcode = &ErrCode{}
			}
			if err := m.Errcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errcode == nil {
				m.Errcode = &ErrCode{}
			}
			if err := m.Errcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckSessionParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckSessionParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckSessionParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errcode == nil {
				m.Errcode = &ErrCode{}
			}
			if err := m.Errcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCofing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCofing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCofing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Errcode == nil {
				m.Errcode = &ErrCode{}
			}
			if err := m.Errcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserInfoParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserInfoParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserInfoParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserConfigParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserConfigParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserConfigParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserInfoParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserInfoParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserInfoParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserConfigParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserConfigParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserConfigParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniapp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniapp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniapp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniapp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiniapp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiniapp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiniapp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMiniapp
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMiniapp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMiniapp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMiniapp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMiniapp
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMiniapp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiniapp   = fmt.Errorf("proto: integer overflow")
)
