// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 574fb16d86
// Version Date: 2019年 04月 12日 星期五 00:42:59 UTC

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/fanioc/go-poetryminapp/services/mini-app"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC MinAppServer.
func MakeGRPCServer(endpoints Endpoints) pb.MinAppServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	return &grpcServer{
		// minapp

		login: grpctransport.NewServer(
			endpoints.LoginEndpoint,
			DecodeGRPCLoginRequest,
			EncodeGRPCLoginResponse,
			serverOptions...,
		),
		checkusersession: grpctransport.NewServer(
			endpoints.CheckUserSessionEndpoint,
			DecodeGRPCCheckUserSessionRequest,
			EncodeGRPCCheckUserSessionResponse,
			serverOptions...,
		),
		getuserinfo: grpctransport.NewServer(
			endpoints.GetUserInfoEndpoint,
			DecodeGRPCGetUserInfoRequest,
			EncodeGRPCGetUserInfoResponse,
			serverOptions...,
		),
		updateuserinfo: grpctransport.NewServer(
			endpoints.UpdateUserInfoEndpoint,
			DecodeGRPCUpdateUserInfoRequest,
			EncodeGRPCUpdateUserInfoResponse,
			serverOptions...,
		),
		getuserconfig: grpctransport.NewServer(
			endpoints.GetUserConfigEndpoint,
			DecodeGRPCGetUserConfigRequest,
			EncodeGRPCGetUserConfigResponse,
			serverOptions...,
		),
		setuserconfig: grpctransport.NewServer(
			endpoints.SetUserConfigEndpoint,
			DecodeGRPCSetUserConfigRequest,
			EncodeGRPCSetUserConfigResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the MinAppServer interface
type grpcServer struct {
	login            grpctransport.Handler
	checkusersession grpctransport.Handler
	getuserinfo      grpctransport.Handler
	updateuserinfo   grpctransport.Handler
	getuserconfig    grpctransport.Handler
	setuserconfig    grpctransport.Handler
}

// Methods for grpcServer to implement MinAppServer interface

func (s *grpcServer) Login(ctx context.Context, req *pb.LoginParams) (*pb.Session, error) {
	_, rep, err := s.login.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Session), nil
}

func (s *grpcServer) CheckUserSession(ctx context.Context, req *pb.CheckSessionParams) (*pb.CheckSession, error) {
	_, rep, err := s.checkusersession.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CheckSession), nil
}

func (s *grpcServer) GetUserInfo(ctx context.Context, req *pb.GetUserInfoParams) (*pb.UserInfo, error) {
	_, rep, err := s.getuserinfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UserInfo), nil
}

func (s *grpcServer) UpdateUserInfo(ctx context.Context, req *pb.UpdateUserInfoParams) (*pb.ErrCode, error) {
	_, rep, err := s.updateuserinfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ErrCode), nil
}

func (s *grpcServer) GetUserConfig(ctx context.Context, req *pb.GetUserConfigParams) (*pb.UserCofing, error) {
	_, rep, err := s.getuserconfig.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UserCofing), nil
}

func (s *grpcServer) SetUserConfig(ctx context.Context, req *pb.SetUserConfigParams) (*pb.ErrCode, error) {
	_, rep, err := s.setuserconfig.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ErrCode), nil
}

// Server Decode

// DecodeGRPCLoginRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC login request to a user-domain login request. Primarily useful in a server.
func DecodeGRPCLoginRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.LoginParams)
	return req, nil
}

// DecodeGRPCCheckUserSessionRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC checkusersession request to a user-domain checkusersession request. Primarily useful in a server.
func DecodeGRPCCheckUserSessionRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CheckSessionParams)
	return req, nil
}

// DecodeGRPCGetUserInfoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getuserinfo request to a user-domain getuserinfo request. Primarily useful in a server.
func DecodeGRPCGetUserInfoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetUserInfoParams)
	return req, nil
}

// DecodeGRPCUpdateUserInfoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC updateuserinfo request to a user-domain updateuserinfo request. Primarily useful in a server.
func DecodeGRPCUpdateUserInfoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateUserInfoParams)
	return req, nil
}

// DecodeGRPCGetUserConfigRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getuserconfig request to a user-domain getuserconfig request. Primarily useful in a server.
func DecodeGRPCGetUserConfigRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetUserConfigParams)
	return req, nil
}

// DecodeGRPCSetUserConfigRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC setuserconfig request to a user-domain setuserconfig request. Primarily useful in a server.
func DecodeGRPCSetUserConfigRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SetUserConfigParams)
	return req, nil
}

// Server Encode

// EncodeGRPCLoginResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain login response to a gRPC login reply. Primarily useful in a server.
func EncodeGRPCLoginResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Session)
	return resp, nil
}

// EncodeGRPCCheckUserSessionResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain checkusersession response to a gRPC checkusersession reply. Primarily useful in a server.
func EncodeGRPCCheckUserSessionResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CheckSession)
	return resp, nil
}

// EncodeGRPCGetUserInfoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getuserinfo response to a gRPC getuserinfo reply. Primarily useful in a server.
func EncodeGRPCGetUserInfoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UserInfo)
	return resp, nil
}

// EncodeGRPCUpdateUserInfoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain updateuserinfo response to a gRPC updateuserinfo reply. Primarily useful in a server.
func EncodeGRPCUpdateUserInfoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ErrCode)
	return resp, nil
}

// EncodeGRPCGetUserConfigResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getuserconfig response to a gRPC getuserconfig reply. Primarily useful in a server.
func EncodeGRPCGetUserConfigResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UserCofing)
	return resp, nil
}

// EncodeGRPCSetUserConfigResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain setuserconfig response to a gRPC setuserconfig reply. Primarily useful in a server.
func EncodeGRPCSetUserConfigResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ErrCode)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
