// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 574fb16d86
// Version Date: 2019年 04月 12日 星期五 00:42:59 UTC

// Package grpc provides a gRPC client for the MinApp service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/fanioc/go-poetryminapp/services/mini-app"
	"github.com/fanioc/go-poetryminapp/services/mini-app/minapp-service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.MinAppServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var loginEndpoint endpoint.Endpoint
	{
		loginEndpoint = grpctransport.NewClient(
			conn,
			"miniapp.MinApp",
			"Login",
			EncodeGRPCLoginRequest,
			DecodeGRPCLoginResponse,
			pb.Session{},
			clientOptions...,
		).Endpoint()
	}

	var checkusersessionEndpoint endpoint.Endpoint
	{
		checkusersessionEndpoint = grpctransport.NewClient(
			conn,
			"miniapp.MinApp",
			"CheckUserSession",
			EncodeGRPCCheckUserSessionRequest,
			DecodeGRPCCheckUserSessionResponse,
			pb.CheckSession{},
			clientOptions...,
		).Endpoint()
	}

	var getuserinfoEndpoint endpoint.Endpoint
	{
		getuserinfoEndpoint = grpctransport.NewClient(
			conn,
			"miniapp.MinApp",
			"GetUserInfo",
			EncodeGRPCGetUserInfoRequest,
			DecodeGRPCGetUserInfoResponse,
			pb.UserInfo{},
			clientOptions...,
		).Endpoint()
	}

	var updateuserinfoEndpoint endpoint.Endpoint
	{
		updateuserinfoEndpoint = grpctransport.NewClient(
			conn,
			"miniapp.MinApp",
			"UpdateUserInfo",
			EncodeGRPCUpdateUserInfoRequest,
			DecodeGRPCUpdateUserInfoResponse,
			pb.ErrCode{},
			clientOptions...,
		).Endpoint()
	}

	var getuserconfigEndpoint endpoint.Endpoint
	{
		getuserconfigEndpoint = grpctransport.NewClient(
			conn,
			"miniapp.MinApp",
			"GetUserConfig",
			EncodeGRPCGetUserConfigRequest,
			DecodeGRPCGetUserConfigResponse,
			pb.UserCofing{},
			clientOptions...,
		).Endpoint()
	}

	var setuserconfigEndpoint endpoint.Endpoint
	{
		setuserconfigEndpoint = grpctransport.NewClient(
			conn,
			"miniapp.MinApp",
			"SetUserConfig",
			EncodeGRPCSetUserConfigRequest,
			DecodeGRPCSetUserConfigResponse,
			pb.ErrCode{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		LoginEndpoint:            loginEndpoint,
		CheckUserSessionEndpoint: checkusersessionEndpoint,
		GetUserInfoEndpoint:      getuserinfoEndpoint,
		UpdateUserInfoEndpoint:   updateuserinfoEndpoint,
		GetUserConfigEndpoint:    getuserconfigEndpoint,
		SetUserConfigEndpoint:    setuserconfigEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCLoginResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC login reply to a user-domain login response. Primarily useful in a client.
func DecodeGRPCLoginResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Session)
	return reply, nil
}

// DecodeGRPCCheckUserSessionResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC checkusersession reply to a user-domain checkusersession response. Primarily useful in a client.
func DecodeGRPCCheckUserSessionResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.CheckSession)
	return reply, nil
}

// DecodeGRPCGetUserInfoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getuserinfo reply to a user-domain getuserinfo response. Primarily useful in a client.
func DecodeGRPCGetUserInfoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserInfo)
	return reply, nil
}

// DecodeGRPCUpdateUserInfoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updateuserinfo reply to a user-domain updateuserinfo response. Primarily useful in a client.
func DecodeGRPCUpdateUserInfoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ErrCode)
	return reply, nil
}

// DecodeGRPCGetUserConfigResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getuserconfig reply to a user-domain getuserconfig response. Primarily useful in a client.
func DecodeGRPCGetUserConfigResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserCofing)
	return reply, nil
}

// DecodeGRPCSetUserConfigResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC setuserconfig reply to a user-domain setuserconfig response. Primarily useful in a client.
func DecodeGRPCSetUserConfigResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ErrCode)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCLoginRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain login request to a gRPC login request. Primarily useful in a client.
func EncodeGRPCLoginRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.LoginParams)
	return req, nil
}

// EncodeGRPCCheckUserSessionRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain checkusersession request to a gRPC checkusersession request. Primarily useful in a client.
func EncodeGRPCCheckUserSessionRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CheckSessionParams)
	return req, nil
}

// EncodeGRPCGetUserInfoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getuserinfo request to a gRPC getuserinfo request. Primarily useful in a client.
func EncodeGRPCGetUserInfoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetUserInfoParams)
	return req, nil
}

// EncodeGRPCUpdateUserInfoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updateuserinfo request to a gRPC updateuserinfo request. Primarily useful in a client.
func EncodeGRPCUpdateUserInfoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateUserInfoParams)
	return req, nil
}

// EncodeGRPCGetUserConfigRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getuserconfig request to a gRPC getuserconfig request. Primarily useful in a client.
func EncodeGRPCGetUserConfigRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetUserConfigParams)
	return req, nil
}

// EncodeGRPCSetUserConfigRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain setuserconfig request to a gRPC setuserconfig request. Primarily useful in a client.
func EncodeGRPCSetUserConfigRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SetUserConfigParams)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
